// the english statement 'depends' here
// might mean a lot of different things to the PPL 
// compiler, but from the perspective of the programmer,
// it's nice to think "oh I depend on *this thing*
// and all I want to do is call the print function". 
#depends <ppl/console>

// There's gonna be like a resolution step where we
// ensure that the stated targets have the capabilites
// as required by all that this compilation unit depends on.
//
// if like any one of the targets is missing some capabilities,
// the compiler will spit out an error over a warning message. 
// error > warning because I don't think it would be cool for a compiler
// to literally just take parts of your source code and fucking
// delete it. That sounds like bug town and debugging hell. 
#targets macOS, web, Android

int main(string[] args) {
    
   /* There exists the fully qualified function.
      Which is nice for us to resolve name clashing. 
   */
   // ppl.console.print("Hello, world!");

   /* and there exists the plain old function.
      Basically, we are free to write the non-qualified
      as long as there is no name clash. But if there
      is, then we will get a compiler error and be
      prompted to qualify our function calls.
      and when there are name clashes, for verbosity,
      all functions who are part of the name clash
      must be qualified, not just one.
   
      and maybe there exists a compiler switch to say
      "No, I know what I'm doing. Let me only have to
      qualify just one please".
   */
   print("Hello, World\n");
   
   return 0;
}