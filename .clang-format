---

# TODO(Noah):
# - If there is a multiline function decl, make it so that it does a break with the {
# - I want the break in switch statements to appear like, after {}
# - my goodness. Please get rid of the fact that it absolutely borks the definitions I have
# setup in grammer.h -> Same with things in lexer.h top of file. Annoying...

Language:        Cpp
# BasedOnStyle:  LLVM

# AccessModifierOffset: -2

AlignAfterOpenBracket: AlwaysBreak
#someLongFunction(
#    argument1,
#    argument2);

#AlignArrayOfStructures: None
#AlignConsecutiveMacros: None
#AlignConsecutiveAssignments: None
#AlignConsecutiveBitFields: None
#AlignConsecutiveDeclarations: None

AlignEscapedNewlines: DontAlign
#define A \
#  int aaaa; \
#  int b; \
#  int dddddddddd;

AlignOperands:   DontAlign

#AlignTrailingComments: false

AllowAllArgumentsOnNextLine: true
# callFunction(
#    a, b, c, d)

#AllowAllConstructorInitializersOnNextLine: true

AllowAllParametersOfDeclarationOnNextLine: true
# void myFunction(
#    int a, int b, int c, int d, int e);

AllowShortEnumsOnASingleLine: true
# enum { A, B } myEnum;

AllowShortBlocksOnASingleLine: Always
# while (true) { continue; }

AllowShortCaseLabelsOnASingleLine: true
# switch (a) {                    
# case 1: x = 1; break;
# case 2: return;
#}     

AllowShortFunctionsOnASingleLine: All
AllowShortLambdasOnASingleLine: All
AllowShortIfStatementsOnASingleLine: Never

AllowShortLoopsOnASingleLine: true
# while (true) continue;


#AlwaysBreakAfterDefinitionReturnType: None

AlwaysBreakAfterReturnType: None
# for function, like for "int foo();" we want to keep int and foo on the same line

#AlwaysBreakBeforeMultilineStrings: false
#AlwaysBreakTemplateDeclarations: MultiLine

#AttributeMacros:
#  - __capability

BinPackArguments: true
# void f() {
#  f(aaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaa,
#    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);
#}

BinPackParameters: false
# void f(int aaaaaaaaaaaaaaaaaaaa,
#        int aaaaaaaaaaaaaaaaaaaa,
#        int aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {}

# for BraceWrapping, relates to the {. On the same line or the next line? Wrapping
# means it is on the next line.
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel:  true
  AfterClass:      false
  AfterControlStatement: MultiLine
  AfterEnum:       false
  AfterFunction:   false
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  BeforeLambdaBody: false
  BeforeWhile:     false
  IndentBraces:    false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false

#BreakBeforeBinaryOperators: None

#BreakBeforeConceptDeclarations: true
#BreakBeforeBraces: Attach

BreakBeforeInheritanceComma: false
BreakInheritanceList: BeforeColon
BreakBeforeTernaryOperators: true

BreakConstructorInitializersBeforeComma: false
BreakConstructorInitializers: BeforeColon
#BreakAfterJavaFieldAnnotations: false
BreakStringLiterals: true
ColumnLimit:     80
#CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4

#Cpp11BracedListStyle: true
DeriveLineEnding: true
DerivePointerAlignment: false
DisableFormat:   false

EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
ExperimentalAutoDetectBinPacking: false
#FixNamespaceComments: true
#ForEachMacros:
#  - foreach
#  - Q_FOREACH
#  - BOOST_FOREACH
#IfMacros:
#  - KJ_IF_MAYBE
IncludeBlocks:   Preserve
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false
IncludeIsMainRegex: '(Test)?$'
IncludeIsMainSourceRegex: ''

IndentAccessModifiers: false

# Very important
IndentCaseLabels: true
IndentCaseBlocks: false
IndentGotoLabels: true

IndentPPDirectives: None
IndentExternBlock: AfterExternBlock
IndentRequires:  false
IndentWidth:     4
IndentWrappedFunctionNames: false
InsertTrailingCommas: None

#JavaScriptQuotes: Leave
#JavaScriptWrapImports: true

# Very important
KeepEmptyLinesAtTheStartOfBlocks: true


LambdaBodyIndentation: Signature
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 1
NamespaceIndentation: None
ObjCBinPackProtocolList: Auto
ObjCBlockIndentWidth: 2
ObjCBreakBeforeNestedBlockParam: true
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 60
PenaltyIndentedWhitespace: 0

PointerAlignment: Right
# int *p, vs int* p

PPIndentWidth:   -1
ReferenceAlignment: Pointer
ReflowComments:  false
ShortNamespaceLines: 1
SortIncludes:    CaseSensitive
#SortJavaStaticImport: Before
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceAroundPointerQualifiers: Default
SpaceBeforeRangeBasedForLoopColon: true
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false

SpacesBeforeTrailingComments: 1
# int var = 1; // I am a trailing comment

#SpacesInAngles:  Never

SpacesInConditionalStatement: false
# if (a)

SpacesInContainerLiterals: true
# var arr = [ 1, 2, 3 ];  

SpacesInCStyleCastParentheses: false
# (int)

SpacesInLineCommentPrefix:
  Minimum:         1
  Maximum:         -1 # disabled
# // example comment with one space after '//' chars.

SpacesInParentheses: false
# (...) OR ( ... )
SpacesInSquareBrackets: false
SpaceBeforeSquareBrackets: false
# int a[5];

#BitFieldColonSpacing: Both

#StatementAttributeLikeMacros:
#  - Q_EMIT

#StatementMacros:
#  - Q_UNUSED
#  - QT_REQUIRE_VERSION

Standard:        c++11
TabWidth:        8
UseCRLF:         false
UseTab:          Never

#WhitespaceSensitiveMacros:
#  - STRINGIZE
#  - PP_STRINGIZE
#  - BOOST_PP_STRINGIZE
#  - NS_SWIFT_NAME
#  - CF_SWIFT_NAME
#...

