PPL reflection,

gingerBill: "people want the omnitool",

"but if you look at most tools, they are single purpose",
- pickaxe
- shovel
- hoe

etc.

for PPL, I do get a little excited about the omnitool. but the vision of PPL
cannot be so, because of the law of tools.

what is it then with PPL?

it's about a general purpose systems programming language that is better than
C++, better than C, but like C, is fast, compiles fast, has features that we
know are good (like compile-time execution) ...

but this is all JAI. John Blow is already on the job.

what is it with PPL then?

it's about 1 language -> any platform.

does that break the law of tools? And isn't that troublesome that specific
platforms mandate a particular lang? (objective-c and/or swift with apple, etc)

Maybe the answer:
=====

PPL is the glue, man. It's the thing that you can use to have the compile-time
interoperation between all the langs. this interop afaik is already true for
compiled languages by way of linking; PPL would try to interop before the
linking stage.